#!/usr/bin/env bash

hostname="beast"
device="/dev/nvme0n1"

# Check if in UEFI mode
if [[ -d "/sys/firmware/efi/efivars" ]]; then
  echo "UEFI mode"
else
  echo "Only UEFI mode supported"
  exit 1
fi

# Check if internet is available
exitcode=""
ping -c3 archlinux.org >/dev/null 2>&1
exitcode=$?
if [[ ${exitcode} -eq 0 ]]; then
  echo "Internet reachable"
else
  echo "Cannot get to the internet"
  exit 1
fi

# Update system time
timedatectl set-ntp true

# Check if device is already mounted
exitcode=""
grep -q sda /proc/mounts >/dev/null 2>&1
exitcode=$?
if [[ ${exitcode} -eq 0 ]]; then
  echo "Device is already mounted, will not continue."
  exit 1
fi

# Wipe MBR and GPT
sgdisk -Z ${device}

# Clear existing partition details and convert to GPT
sgdisk -og ${device}

# Create partitions
sgdisk --new=1:0:+1024MiB --typecode=1:ef00 --change-name=1:"EFIPART" \
       --new=2:0:0 --typecode=2:8300 --change-name=2:"OSPART" \
       ${device}

# Print partition details
sgdisk -p ${device}

cryptsetup -y -v --batch-mode luksFormat /dev/disk/by-partlabel/OSPART --label OSCRYPTVOL
cryptsetup open /dev/disk/by-label/OSCRYPTVOL OSCRYPTVOL

# Format the partions
mkfs.vfat -F32 /dev/disk/by-partlabel/EFI
mkfs.btrfs -L OS /dev/mapper/OSCRYPTVOL

# Use the nearest mirrors
pacman -Sy reflector --noconfirm
reflector --country "US" --latest 15 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

o=defaults,x-mount.mkdir
o_btrfs=$o,compress=zstd:1,ssd

# Mount the partitions
mount -t btrfs LABEL=OS /mnt
btrfs subvolume create /mnt/rootvol
btrfs subvolume create /mnt/homevol
btrfs subvolume create /mnt/snapshotsvol
umount -Rv /mnt

mount -v -t btrfs -o subvol=rootvol,$o_btrfs LABEL=OS /mnt
mount -v -t btrfs -o subvol=homevol,$o_btrfs LABEL=OS /mnt/home
mount -v -t btrfs -o subvol=snapshotsvol,$o_btrfs LABEL=OS /mnt/snapshots
mount -v -o $o /dev/disk/by-partlabel/EFIPART /mnt/boot

# Pacstrap
pacstrap /mnt \
linux \
linux-headers \
base \
base-devel \
linux-firmware \
btrfs-progs \
vim

# Setup fstab
genfstab -L -p /mnt >> /mnt/etc/fstab

# Copy install scripts to the chroot environment
if [[ -d /mnt/root ]]; then
  echo "Copying $(pwd) install scripts into the chroot environment."
  cp -r "$(pwd)" /mnt/root/
else
  echo "Failed to copy $(dirname "$0") install scripts into the chroot environment."
  exit 1
fi

# chroot
arch-chroot /mnt /root/archlinux-installer/2.install-base-system-${hostname}

# Reboot
echo "All done. Rebooting in 10 secs."
sleep 10
reboot
