#!/usr/bin/env bash

bootmode=""
hostname="r2d2"
device="/dev/sda"

# Check if in UEFI mode
if [[ -d "/sys/firmware/efi/efivars" ]]; then
  echo "UEFI mode"
  bootmode="UEFI"
else
  echo "Only UEFI mode supported"
  exit 1
fi

# Check if internet is available
exitcode=""
ping -c3 archlinux.org 2>&1 >/dev/null
exitcode=$?
if [[ ${exitcode} -eq 0 ]]; then
  echo "Internet reachable"
else
  echo "Cannot get to the internet"
  exit 1
fi

# Update system time
timedatectl set-ntp true

# Check if device is already mounted
exitcode=""
grep -q sda /proc/mounts >/dev/null 2>&1
exitcode=$?
if [[ ${exitcode} -eq 0 ]]; then
  echo "Device is already mounted, will not continue."
  exit 1
fi

# Wipe MBR and GPT
sgdisk -Z ${device}

# Clear existing partition details and convert to GPT
sgdisk -og ${device}

# Create partitions
sgdisk --new=1:0:+1024MiB --typecode=1:ef00 --change-name=1:"EFI" \
       --new=2:0:0 --typecode=2:8300 --change-name=2:"OS" \
       ${device}
sync
lsblk -l ${device} -o PATH,TYPE,PARTLABEL

exit
first_sector="$(sgdisk -F ${device})"
last_sector="$(sgdisk -E ${device})"
sgdisk -n 1:${first_sector}:+1024M -c 1:"EFI" -t 1:ef00 -g ${device}
first_sector="$(sgdisk -F ${device})"
sgdisk -n 2:${fisrt_sector}:${last_sector} -c 2:"OS" -t 2:8300 -g ${device}
sgdisk -p ${device}

part1="$(lsblk -l ${device} -o PATH,TYPE -n | grep part | awk '{print $1}' | head -n1)"
part2="$(lsblk -l ${device} -o PATH,TYPE -n | grep part | awk '{print $1}' | tail -n1)"

cryptsetup -y -v --batch-mode luksFormat ${part2}
cryptsetup open ${part2} cryptroot
cryptpart="/dev/mapper/cryptroot"

# Format the partions
mkfs.vfat -F32 ${part1}
mkfs.btrfs -L OS ${cryptpart}

# Use the nearest mirrors
pacman -Sy reflector --noconfirm
reflector --country "US" --latest 15 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

# Mount the partitions
mount ${cryptpart} /mnt
mkdir -p /mnt/boot
mount ${part1} /mnt/boot

# Pacstrap
pacstrap /mnt \
linux \
linux-headers \
base \
base-devel \
linux-firmware \
btrfs-progs \
vim

# Setup fstab
genfstab -U /mnt >> /mnt/etc/fstab

# Copy install scripts to the chroot environment
if [[ -d /mnt/root ]]; then
  echo "Copying "$(pwd)" install scripts into the chroot environment."
  cp -r "$(pwd)" /mnt/root/
else
  echo "Failed to copy "$(dirname "$0")" install scripts into the chroot environment."
  exit 1
fi

# chroot
arch-chroot /mnt /root/archlinux-installer/2.install-base-system-${hostname}

# Reboot
echo "All done. Rebooting in 5 secs."
sleep 5
reboot
